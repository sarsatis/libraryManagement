 # Calculate pipeline_name
      pipeline_name = regex(".*-gl$", each.value.repo_name) != "" ? substr(each.value.repo_name, 0, length(each.value.repo_name) - 3) : each.value.repo_name

      # Calculate pipeline_identifier (replace - with space, remove -gl if present)
      pipeline_identifier = regex(".*-gl$", each.value.repo_name) != "" ? 
        replace(substr(each.value.repo_name, 0, length(each.value.repo_name) - 3), "-", " ") : 
        replace(each.value.repo_name, "-", " ")
---
#!/bin/bash

# Variables
VIRTUALSERVICE_NAME="vs-state-mgmt-canary-svc-svc"
NAMESPACE="<namespace>"  # Replace with your namespace

echo "Fetching VirtualService $VIRTUALSERVICE_NAME from namespace $NAMESPACE..."

# Get the VirtualService JSON
virtual_service=$(oc get virtualservice $VIRTUALSERVICE_NAME -n $NAMESPACE -o json)

if [ $? -ne 0 ]; then
  echo "Failed to fetch VirtualService. Please check the name and namespace."
  exit 1
fi

echo "Successfully fetched VirtualService. Now checking for route with 'reg-channel-version: ocp-svc-test'..."

# Find the index of the route with the ocp-svc-test header
route_index=$(echo $virtual_service | jq -r '.spec.http | to_entries[] | select(.value.match[].headers["reg-channel-version"].exact == "ocp-svc-test") | .key')

# Debugging: Print the full http section for easier visibility
echo "HTTP section of the VirtualService:"
echo $virtual_service | jq '.spec.http'

# Check if the route exists
if [ -z "$route_index" ]; then
  echo "No route found with 'reg-channel-version: ocp-svc-test' in VirtualService $VIRTUALSERVICE_NAME."
  exit 0  # Exit without error if the route doesn't exist
else
  echo "Route with 'reg-channel-version: ocp-svc-test' found at index $route_index."
  
  # Debugging: Print the exact match that will be deleted
  echo "The following route will be deleted:"
  echo $virtual_service | jq ".spec.http[$route_index]"

  # Delete the route using the identified index
  echo "Proceeding to delete the route..."
  oc patch virtualservice $VIRTUALSERVICE_NAME -n $NAMESPACE \
    --type='json' \
    -p="[{\"op\": \"remove\", \"path\": \"/spec/http/$route_index\"}]"

  if [ $? -eq 0 ]; then
    echo "Route with 'reg-channel-version: ocp-svc-test' successfully deleted from VirtualService $VIRTUALSERVICE_NAME."
  else
    echo "Failed to delete the route. Please check the output above for more details."
  fi
fi

---
#!/bin/bash

# Variables
VIRTUALSERVICE_NAME="vs-state-mgmt-canary-svc-svc"
NAMESPACE="<namespace>"  # Replace with the correct namespace

# Get the VirtualService JSON
virtual_service=$(oc get virtualservice $VIRTUALSERVICE_NAME -n $NAMESPACE -o json)

# Find the index of the route with the ocp-gc header
route_index=$(echo $virtual_service | jq -r '.spec.http | to_entries[] | select(.value.match[].headers["reg-channel-version"].exact == "ocp-gc") | .key')

# Check if the route exists
if [ -z "$route_index" ]; then
  echo "Route with 'reg-channel-version: ocp-gc' header not found in VirtualService $VIRTUALSERVICE_NAME."
  exit 1
fi

# Delete the route using the identified index
oc patch virtualservice $VIRTUALSERVICE_NAME -n $NAMESPACE \
  --type='json' \
  -p="[{\"op\": \"remove\", \"path\": \"/spec/http/$route_index\"}]"

echo "Route with 'reg-channel-version: ocp-gc' header deleted from VirtualService $VIRTUALSERVICE_NAME."

---
oc patch virtualservice vs-state-mgmt-canary-svc-svc -n default --type=json -p='[{"op": "add", "path": "/spec/http/0", "value": {"match": [{"headers": {"reg-channel-version": {"exact": "ocp-gc"}}}, {"uri": {"prefix": "/core/state-mgmt-service/v1"}}], "route": [{"destination": {"host": "iau-state-mgmt-core-service", "port": {"number": 8080}, "subset": "iau-state-mgmt-core-service-ocp-gc"}}]}}]'

---
apiVersion: batch/v1
kind: Job
metadata:
  name: remove-matcher-job
  namespace: default  # Change this if needed
  annotations:
    argocd.argoproj.io/hook: PostDelete
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      containers:
      - name: remove-matcher
        image: bitnami/kubectl:latest  # Using a lightweight image with kubectl
        command: ["/bin/bash"]
        args:
        - -c
        - |
          #!/bin/bash

          # Define variables
          VIRTUALSERVICE_NAME="vs-state-mgmt-canary-svc-svc"
          NAMESPACE="default"
          SUBSET_NAME="iau-state-mgmt-core-service-ocp-gc"

          # Get the current VirtualService configuration
          MATCHER_INDEX=$(kubectl get virtualservice $VIRTUALSERVICE_NAME -n $NAMESPACE -o jsonpath='{range .spec.http[*]}{.route[*].destination.subset}{"\n"}{end}' | grep -n $SUBSET_NAME | cut -d: -f1)

          # Check if the matcher exists
          if [[ -n $MATCHER_INDEX ]]; then
              # Adjust index to match JSON path
              JSON_INDEX=$((MATCHER_INDEX - 1))

              # Remove the matcher
              kubectl patch virtualservice $VIRTUALSERVICE_NAME -n $NAMESPACE --type=json -p="[{'op': 'remove', 'path': '/spec/http/$JSON_INDEX'}]"
              echo "Matcher with subset '$SUBSET_NAME' has been removed."
          else
              echo "No matcher found with subset '$SUBSET_NAME'."
          fi
      restartPolicy: Never


---
openssl crl2pkcs7 -nocrl -certfile ca.crt | openssl pkcs7 -print_certs -text -noout

---

 def branchExists = sh(
                            script: """
                            curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${GITHUB_TOKEN}" \
                            https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/branches/${BRANCH_NAME}
                            """,
                            returnStatus: true
                        ) == 200

---
#!/bin/bash

# Actuator health endpoint (assuming it's exposed via a service)
ACTUATOR_ENDPOINT="http://your-canary-service/actuator/health"

# Polling interval (in seconds)
POLL_INTERVAL=30

# Maximum runtime (in seconds)
MAX_RUNTIME=900

# Number of requests to send in each batch
REQUEST_BATCH_SIZE=10

# Number of batches to send
TOTAL_BATCHES=5

# Function to check actuator health
check_actuator_health() {
  RESPONSE=$(curl -s $ACTUATOR_ENDPOINT)
  STATUS=$(echo $RESPONSE | grep -o '"status":"[^"]*"' | grep -o '[^"]*$')
  
  if [ "$STATUS" == "UP" ]; then
    return 0
  else
    return 1
  fi
}

# Polling loop with timer
start_time=$(date +%s)

while true; do
  echo "Checking actuator health..."
  
  if check_actuator_health; then
    echo "Actuator is up and healthy. Sending additional requests to confirm..."

    # Initialize the counter for successful batches
    successful_batches=0

    # Send additional requests in batches
    for ((batch=1; batch<=TOTAL_BATCHES; batch++)); do
      batch_successful=true

      for ((req=1; req<=REQUEST_BATCH_SIZE; req++)); do
        if ! check_actuator_health; then
          echo "Request $req in batch $batch failed. Resetting counter."
          batch_successful=false
          break
        fi
      done

      if $batch_successful; then
        echo "Batch $batch successful."
        successful_batches=$((successful_batches + 1))
      else
        successful_batches=0
        break
      fi

      # Sleep between batches if there are more batches to send
      if [ $batch -lt $TOTAL_BATCHES ]; then
        echo "Waiting $POLL_INTERVAL seconds before next batch..."
        sleep $POLL_INTERVAL
      fi
    done

    # Check if all batches were successful
    if [ $successful_batches -eq $TOTAL_BATCHES ]; then
      echo "All batches successful. Proceeding with BDD tests."
      break
    else
      echo "Some batches failed. Restarting the check."
    fi
  else
    echo "Actuator is not up yet. Waiting..."
    sleep $POLL_INTERVAL
  fi
  
  # Check elapsed time
  current_time=$(date +%s)
  elapsed_time=$((current_time - start_time))
  
  if [ $elapsed_time -ge $MAX_RUNTIME ]; then
    echo "Maximum runtime exceeded. Exiting..."
    exit 1
  fi
done

exit 0

----
post {
        success {
            script {
                // Fetch the latest commit SHA for the PR
                def response = sh(script: "curl -s -H \"Authorization: token ${env.GITHUB_TOKEN}\" https://api.github.com/repos/${env.REPO_OWNER}/${env.REPO_NAME}/pulls/${env.PR_NUMBER}", returnStdout: true).trim()
                def json = readJSON text: response
                def commitSha = json.head.sha
                
                // Update the status for the commit
                def statusPayload = """{
                    "state": "success",
                    "description": "Build succeeded",
                    "context": "continuous-integration/jenkins"
                }"""
                sh "curl -X POST -H \"Authorization: token ${env.GITHUB_TOKEN}\" -d '${statusPayload}' https://api.github.com/repos/${env.REPO_OWNER}/${env.REPO_NAME}/statuses/${commitSha}"
            }
        }
        failure {
            script {
                // Fetch the latest commit SHA for the PR
                def response = sh(script: "curl -s -H \"Authorization: token ${env.GITHUB_TOKEN}\" https://api.github.com/repos/${env.REPO_OWNER}/${env.REPO_NAME}/pulls/${env.PR_NUMBER}", returnStdout: true).trim()
                def json = readJSON text: response
                def commitSha = json.head.sha
                
                // Update the status for the commit
                def statusPayload = """{
                    "state": "failure",
                    "description": "Build failed",
                    "context": "continuous-integration/jenkins"
                }"""
                sh "curl -X POST -H \"Authorization: token ${env.GITHUB_TOKEN}\" -d '${statusPayload}' https://api.github.com/repos/${env.REPO_OWNER}/${env.REPO_NAME}/statuses/${commitSha}"
            }
        }
    }
}

---
pipeline {
    agent any
    environment {
        GITHUB_TOKEN = credentials('github-token-id') // GitHub token stored in Jenkins credentials
    }
    stages {
        stage('Fetch PR Labels') {
            steps {
                script {
                    def prNumber = env.ghprbPullId
                    def repo = 'owner/repository'
                    def response = sh(script: "curl -s -H \"Authorization: token ${env.GITHUB_TOKEN}\" -H \"Accept: application/vnd.github.v3+json\" https://api.github.com/repos/${repo}/issues/${prNumber}/labels", returnStdout: true).trim()
                    def labels = readJSON(text: response)
                    def appName = labels.find { it.name.startsWith('appname:') }?.name?.split(': ')[1]
                    def releaseName = labels.find { it.name.startsWith('releaseName:') }?.name?.split(': ')[1]
                    
                    if (!appName || !releaseName) {
                        error("Required labels not found.")
                    }
                    
                    env.ACTUATOR_ENDPOINT = "https://sitsasasasaasas/${appName}/v1.0/actuator/health"
                    env.RELEASE_NAME = releaseName
                    
                    echo "Labels for PR #${prNumber}: ${labels*.name.join(', ')}"
                    echo "ACTUATOR_ENDPOINT: ${env.ACTUATOR_ENDPOINT}"
                    echo "RELEASE_NAME: ${env.RELEASE_NAME}"
                }
            }
        }
        stage('Check Actuator Health') {
            steps {
                withCredentials([
                    file(credentialsId: 'tls-crt-id', variable: 'TLS_CRT_PATH'),
                    file(credentialsId: 'tls-key-id', variable: 'TLS_KEY_PATH')
                ]) {
                    sh """
                    chmod +x path/to/your/script.sh
                    path/to/your/script.sh \$TLS_CRT_PATH \$TLS_KEY_PATH \$ACTUATOR_ENDPOINT \$RELEASE_NAME
                    """
                }
            }
        }
        // Other stages...
    }
}

---
pipeline {
    agent any
    environment {
        GITHUB_TOKEN = credentials('github-token-id') // GitHub token stored in Jenkins credentials
    }
    stages {
        stage('Fetch PR Labels') {
            steps {
                script {
                    def prNumber = env.ghprbPullId
                    def repo = 'owner/repository'
                    def response = sh(script: "curl -s -H \"Authorization: token ${env.GITHUB_TOKEN}\" -H \"Accept: application/vnd.github.v3+json\" https://api.github.com/repos/${repo}/issues/${prNumber}/labels", returnStdout: true).trim()
                    def labels = readJSON(text: response)
                    echo "Labels for PR #${prNumber}: ${labels*.name.join(', ')}"
                }
            }
        }
        // Other stages...
    }
}

---------------------
#!/bin/bash

# Actuator health endpoint (assuming it's exposed via a service)
ACTUATOR_ENDPOINT="http://your-canary-service/actuator/health"

# Polling interval (in seconds)
POLL_INTERVAL=30

# Maximum runtime (in seconds)
MAX_RUNTIME=900

# Function to check actuator health
check_actuator_health() {
  RESPONSE=$(curl -s $ACTUATOR_ENDPOINT)
  STATUS=$(echo $RESPONSE | grep -o '"status":"[^"]*"' | grep -o '[^"]*$')
  
  if [ "$STATUS" == "UP" ]; then
    return 0
  else
    return 1
  fi
}

# Polling loop with timer
start_time=$(date +%s)

while true; do
  echo "Checking actuator health..."
  
  if check_actuator_health; then
    echo "Actuator is up and healthy."
    break
  else
    echo "Actuator is not up yet. Waiting..."
    sleep $POLL_INTERVAL
  fi
  
  # Check elapsed time
  current_time=$(date +%s)
  elapsed_time=$((current_time - start_time))
  
  if [ $elapsed_time -ge $MAX_RUNTIME ]; then
    echo "Maximum runtime exceeded. Exiting..."
    exit 1
  fi
done

echo "Canary instance is healthy. Proceeding with BDD tests."
exit 0

----------------------

pipeline {
    agent any
    environment {
        ACTUATOR_ENDPOINT = "https://your-canary-service/actuator/health"
    }
    stages {
        stage('Wait for Canary Pods') {
            steps {
                script {
                    // Fetch the certificate and key from Jenkins credentials
                    withCredentials([string(credentialsId: 'SIT_TLS_CRT', variable: 'CERT_CONTENT'),
                                     string(credentialsId: 'SIT_TLS_KEY', variable: 'KEY_CONTENT')]) {

                        // Write the certificate and key to the specified paths
                        writeFile file: 'path/tls.crt', text: CERT_CONTENT
                        writeFile file: 'path/tls.key', text: KEY_CONTENT

                        def pollScript = """
                        #!/bin/bash
                        ACTUATOR_ENDPOINT="${env.ACTUATOR_ENDPOINT}"
                        CERT_PATH="path/tls.crt"
                        KEY_PATH="path/tls.key"
                        POLL_INTERVAL=30

                        check_actuator_health() {
                            echo "Polling Actuator Endpoint: \$ACTUATOR_ENDPOINT"
                            CURL_COMMAND="curl -s --cert \$CERT_PATH --key \$KEY_PATH \$ACTUATOR_ENDPOINT"
                            echo "Formed Request: \$CURL_COMMAND"
                            RESPONSE=\$(\$CURL_COMMAND)
                            STATUS=\$(echo \$RESPONSE | grep -o '"status":"[^"]*"' | grep -o '[^"]*\$')
                            echo "Response: \$RESPONSE"
                            echo "Parsed Status: \$STATUS"
                            if [ "\$STATUS" == "UP" ]; then
                                return 0
                            else
                                return 1
                            fi
                        }

                        while true; do
                            echo "Checking actuator health..."
                            if check_actuator_health; then
                                echo "Actuator is up and healthy."
                                break
                            else
                                echo "Actuator is not up yet. Waiting..."
                                sleep \$POLL_INTERVAL
                            fi
                        done

                        echo "Canary instance is healthy. Proceeding with BDD tests."
                        exit 0
                        """
                        writeFile file: 'pollActuatorHealth.sh', text: pollScript
                        sh 'chmod +x pollActuatorHealth.sh'
                        sh './pollActuatorHealth.sh'
                    }
                }
            }
        }
        stage('Run BDD Tests') {
            steps {
                echo 'Running BDD tests...'
                // Add your steps to run BDD tests here
            }
        }
    }
}

----

#!/bin/bash
ACTUATOR_ENDPOINT="$1"
CERT_PATH="$2"
KEY_PATH="$3"
POLL_INTERVAL=30

check_actuator_health() {
    echo "Polling Actuator Endpoint: $ACTUATOR_ENDPOINT"
    CURL_COMMAND="curl -s --cert $CERT_PATH --key $KEY_PATH $ACTUATOR_ENDPOINT"
    echo "Formed Request: $CURL_COMMAND"
    RESPONSE=$($CURL_COMMAND)
    STATUS=$(echo $RESPONSE | grep -o '"status":"[^"]*"' | grep -o '[^"]*$')
    echo "Response: $RESPONSE"
    echo "Parsed Status: $STATUS"
    if [ "$STATUS" == "UP" ]; then
        return 0
    else
        return 1
    fi
}

while true; do
    echo "Checking actuator health..."
    if check_actuator_health; then
        echo "Actuator is up and healthy."
        break
    else
        echo "Actuator is not up yet. Waiting..."
        sleep $POLL_INTERVAL
    fi
done

echo "Canary instance is healthy. Proceeding with BDD tests."
exit 0

pipeline {
    agent any
    environment {
        ACTUATOR_ENDPOINT = "https://your-canary-service/actuator/health"
    }
    stages {
        stage('Wait for Canary Pods') {
            steps {
                script {
                    // Fetch the certificate and key from Jenkins credentials
                    withCredentials([string(credentialsId: 'SIT_TLS_CRT', variable: 'CERT_CONTENT'),
                                     string(credentialsId: 'SIT_TLS_KEY', variable: 'KEY_CONTENT')]) {

                        // Write the certificate and key to the specified paths
                        writeFile file: 'path/tls.crt', text: CERT_CONTENT
                        writeFile file: 'path/tls.key', text: KEY_CONTENT

                        // Write the poll script to the workspace
                        writeFile file: 'pollActuatorHealth.sh', text: libraryResource('path/to/pollActuatorHealth.sh')
                        sh 'chmod +x pollActuatorHealth.sh'

                        // Execute the poll script
                        sh './pollActuatorHealth.sh "${env.ACTUATOR_ENDPOINT}" "path/tls.crt" "path/tls.key"'
                    }
                }
            }
        }
        stage('Run BDD Tests') {
            steps {
                echo 'Running BDD tests...'
                // Add your steps to run BDD tests here
            }
        }
    }
}


----

pipeline {
    agent any
    environment {
        GITHUB_TOKEN = credentials('github-token-id') // GitHub token stored in Jenkins credentials
    }
    stages {
        stage('Fetch PR Labels') {
            steps {
                script {
                    def prNumber = env.ghprbPullId
                    def repo = 'owner/repository'
                    def response = sh(script: "curl -s -H \"Authorization: token ${env.GITHUB_TOKEN}\" -H \"Accept: application/vnd.github.v3+json\" https://api.github.com/repos/${repo}/issues/${prNumber}/labels", returnStdout: true).trim()
                    def labels = readJSON(text: response)
                    
                    // Ensure there are exactly 4 labels
                    if (labels.size() != 4) {
                        error("Expected exactly 4 labels, but found ${labels.size()}.")
                    }
                    
                    // Extract appName and releaseName from labels
                    def appNameLabel = labels.find { it.name.startsWith('appname:') }
                    def releaseNameLabel = labels.find { it.name.startsWith('releaseName:') }
                    
                    if (!appNameLabel || !releaseNameLabel) {
                        error("Required labels not found.")
                    }
                    
                    def appName = appNameLabel.name.split(': ')[1]
                    def releaseName = releaseNameLabel.name.split(': ')[1]
                    
                    // Read the YAML file
                    def appConfig = readYaml file: 'path/to/app_config.yaml'
                    def serviceConfig = appConfig.services[appName]
                    
                    // Check if appName exists in YAML
                    if (!serviceConfig) {
                        error("Appname '${appName}' not found in YAML configuration. Stopping pipeline execution.")
                    }
                    
                    def contextPath = serviceConfig.context_path
                    
                    env.ACTUATOR_ENDPOINT = "https://your-canary-service${contextPath}"
                    env.RELEASE_NAME = releaseName
                    
                    echo "Labels for PR #${prNumber}: ${labels*.name.join(', ')}"
                    echo "ACTUATOR_ENDPOINT: ${env.ACTUATOR_ENDPOINT}"
                    echo "RELEASE_NAME: ${env.RELEASE_NAME}"
                }
            }
        }
        stage('Check Actuator Health') {
            when {
                expression { return env.ACTUATOR_ENDPOINT != null }
            }
            steps {
                withCredentials([
                    file(credentialsId: 'tls-crt-id', variable: 'TLS_CRT_PATH'),
                    file(credentialsId: 'tls-key-id', variable: 'TLS_KEY_PATH')
                ]) {
                    sh """
                    chmod +x path/to/your/script.sh
                    path/to/your/script.sh \$TLS_CRT_PATH \$TLS_KEY_PATH \$ACTUATOR_ENDPOINT \$RELEASE_NAME
                    """
                }
            }
        }
        // Other stages...
    }
}



